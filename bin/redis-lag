#!/usr/bin/perl

use strict;
use warnings;
use IO::Socket;
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat bundling);
use Pod::Usage qw(pod2usage);
use POSIX ();

use App::RedisLag;

package main;

sub new{
    my $class = shift;
    my $self = bless {
        sleep       => undef,
        redis_lag   => undef,
        @_,
    }, $class;
    $self;
}

sub start {
    my $self = shift ;
    my $opt = +{};

    GetOptions(
        'd|daemon'          => \$opt->{daemon},
        'pidfile=s'         => \$opt->{pidfile},
        'v|verbose'         => \$opt->{verbose},
        's|slave_host=s'    => \$opt->{slave_host},
        'm|master_host=s'   => \$opt->{master_host},
        'p|port=i'          => \$opt->{port},
        'k|result_key=s'    => \$opt->{result_key},
        'master_port=i'     => \$opt->{master_port},
        'slave_port=i'      => \$opt->{slave_port},
        't|timeout=i'       => \$opt->{timeout},
        'sleep=i'           => \$opt->{sleep},
        'debug'             => \$opt->{debug},
        'munin_result'      => \$opt->{munin_result},
        'h|help'            => \$opt->{help},
    ) or pod2usage 1;
    if ($opt->{help}){
        pod2usage 1;
    }

    $self->{sleep} = $opt->{sleep}          || 1;
    my $timeout     = $opt->{timeout}       || 120;
    my $port        = $opt->{port}          || 6379;
    my $slave_port  = $opt->{slave_port}    || $port;
    my $master_port = $opt->{master_port}   || $port;
    my $slave_host  = $opt->{slave_host}  ? $opt->{slave_host}  : '127.0.0.1';
    my $master_host = $opt->{master_host} ? $opt->{master_host} : '127.0.0.1';
    my $result_key  = $opt->{result_key}  ? $opt->{result_key} : 'slave';
    my $pidfile     = $opt->{pidfile}  ? $opt->{pidfile} : '/tmp/redis-lag.pid';


    $self->{redis_lag} = App::RedisLag->new(
                            timeout     => $timeout,
                            verbose     => $opt->{verbose},
                            debug       => $opt->{debug},
                            daemon      => $opt->{daemon},
                            slave_host  => $slave_host,
                            slave_port  => $slave_port,
                            result_key  => $result_key,
                            master_host => $master_host,
                            master_port => $master_port,
                        );
                        
    if($opt->{munin_result}){
        my $result = $self->{redis_lag}->get_result();
		if($result){
			print "current.value $result->{current}\n";
			print "avg.value $result->{avg}\n";
			print "max.value $result->{max}\n";
			print "min.value $result->{min}\n";
		}
        exit 0;
    }

    if($opt->{debug} && !$opt->{daemon}){
        $self->run_loop();
    }
    if($opt->{daemon}){
        my $pid = fork();
        if(!defined $pid) {
            die "Faild to fork(): $!\n";
        }
        exit 0 if $pid; # 親プロセスは終了する
        POSIX::setsid() ||
            die "Could not detach from parent process\n";
        open(OUT, ">$pidfile");
        print OUT POSIX::getpid;
        close(OUT);
        $self->run_loop();
    }
    else{
        pod2usage 1;
    }

}

sub run_loop {
    my $self = shift ;
    while(1) {
        $self->{redis_lag}->run;
        sleep($self->{sleep});
    }
}
        

my $main = main->new();

$main->start();


__END__

=head1 NAME

redis-lag  - Reids replication lag Porring tool.


=head1 DESCRIPTION


Reids replication lag Porring tool.

=head1 USAGE

redis-lag [options]

=head2 Example

=over 4

=item redis-lag -d -m=10.0.0.1 -s=10.0.0.2 

=item redis-lag -d --sleep 5 -m=10.0.0.1 -s=10.0.0.2 

=item redis-lag -d --timeout 240 -m=10.0.0.1 -s=10.0.0.2 

=back

=head1 OPTIONS

=over 4

=item -d, --daemon  

start daemon

=item -v, --verbose

enable show verbose

=item -s, --slave_host 

set slave hostname or IP (default:127.0.0.1)

=item -m, --master_host

set master hostname or IP (default:127.0.0.1)

=item -p, --port

set master and slave port (default:6379)

=item -k, --result_key

set result key name (default:slave)

=item --master_port

set master port (default:-p,--port)

=item --slave_port

set slave port (default:-p,--port)

=item -t, --timeout

timeout (default:120)

=item --sleep

sleep time (default:1)

=item --debug

enable debug 

=item --munin_result

show munin plugin result 


=item -h, --help

show help

=back

=cut

